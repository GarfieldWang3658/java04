public class BitOperator{
	public static void main(String[] args){

		//推导过程
		//2&3，先去的2的补码
		//2的补码=> 2的原码=00000000 00000000 00000000 00000010
		//2的补码=00000000 00000000 00000000 00000010
		//3的补码=>3的原码=00000000 00000000 00000000 00000011
		//3的补码=00000000 00000000 00000000 00000011
		//按位与 &
		//00000000 00000000 00000000 00000010
		//00000000 00000000 00000000 00000011
		//00000000 00000000 00000000 00000010 & 运算后的补码
		//运算后的原码 也是00000000 00000000 00000000 00000010
		//由于是正数，补码=原码
		//结果 转为10进制 = 2

		System.out.println(2&3);//2


		//先得到 -2 的原码 10000000 00000000 00000000 00000010
		//-2的补码=负数的反码=11111111 11111111 11111111 11111101
		//-2的补码=反码+1=11111111 11111111 11111111 11111110
		//～-2操作（取反）=00000000 00000000 00000000 000000001=运算后的补码
		//运算后的原码就是 00000000 00000000 00000000 00000001
		//～-2=1

		System.out.println(~-2);//1

		//~2补码=00000000 00000000 00000000 00000010
		//取反=11111111 11111111 11111111 11111101 运算后的补码
		//负数的反码=运算后的补码-1=11111111 11111111 11111111 11111100
		//负数的原码=负数的反码，符号位不变，其他取反
		//=10000000 00000000 00000000 00000011
		//=-3

		System.out.println(~2);//-3

		//2补码=00000000 00000000 00000000 00000010
		//3补码=00000000 00000000 00000000 00000011
		//正数三码合一
		//运算后的补码=00000000 00000000 00000000 00000011
		//运算后原码=00000000 00000000 00000000 00000011
		//2｜3=3

		System.out.println(2|3);//3

		//2补码=00000000 00000000 00000000 00000010
		//3补码=00000000 00000000 00000000 00000011
		//正数三码合一
		//运算后补码=00000000 00000000 00000000 00000001
		//运算后源码=00000000 00000000 00000000 00000001
		//2^3=1

		System.out.println(2^3);//1






	}
}